//// Your backbase sass functions belong here -- which return some sass/css/data values
//// This is where the backbase theme overrides or extends upon existing Bootstrap 4 functions

/// Nested Map Accessor Utility
/// Iterates over a nested map, based on a linear drilldown to the property value that's nested
/// @access public
/// @group general-helpers
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Returns the level at which the properties are successively provided 
/// @example 
///   map-deep-get($map, "parent-prop", "child-prop")
@function map-deep-get($map, $keys...) {
  $counter: 1;
  @each $key in $keys {
    $map: map-get($map, $key);
    @if $map == null {
      @return nth($map, $counter);
    }
    $counter: $counter + 1;
  }
  @return $map;
}

/// Deep set function to set a value in nested maps
/// @access public
/// @group general-helpers
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}
/// @example 
/// $color-palette: map-deep-set($color-palette, "actions" "primary" "default", #111111);
/// Note: $keys is a comma-less list of strings
@function map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;
  
  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }
  
  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }
  
  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }
  
  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }
  
  // Return result
  @return $result;
}
/// [BS4] Color function override
/// @access public
/// @group color-helpers
/// @param {Arglist} $colorProps - Key chain
/// @return {*} - Color or Map (if incomplete)
/// @example 
///   color("Actions[i]", "Supports[i], Extends[i]") 
///   color("primary")
/// @example 
///   color("actions" "primary", "darker")
@function color($colorProps...) {
  $supportList: map-keys(map-get($color-palette, "support"));
  $actionList: map-keys(map-get($color-palette, "actions"));
  $colorsList: map-keys($colors);
  $joinedColors: join(join( $supportList, $actionList), $colorsList);

  //if single color specifier, assume to return a default
  @if length($colorProps) == 1 { 
    $shortcut: nth($colorProps, 1);
    
    //if shortcut is contained in support, action, colors
    @if index($supportList, $shortcut) {
      @return map-deep-get($color-palette, 'support', $shortcut, "default");
    }
    @else if index($actionList, $shortcut) {
      @return map-deep-get($color-palette, 'actions', $shortcut, "default");
    }
    @else if index($colorsList, $shortcut) {
      @return map-get($colors, $shortcut);
    }
    @else {
      @error "Please check the $color-palette to retrieve the correct color ref. (provided args:: #{$colorProps}";
    }
  }
  //If no shortcut...treat the color argsList as the full successive reference to the color
  @return map-deep-get($color-palette, $colorProps...);
}